#!/usr/bin/env bash
usage() {
    cat << EOF 1>&2
Usage: $CMD BACKUP_PATH DB_NAME
EOF
    exit 2
}

CMD=$(basename "$0")                    # Command name.
BACKUP_PATH=$1
DB_NAME=$2

if [[ $# -ne 2 ]]; then
    usage
fi

echo "Backup Path:   $BACKUP_PATH"
echo "DB Name:       $DB_NAME"

read -p "Are you sure? " -n 1 -r
echo                                    # Move to a new line.
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
fi

( cd "$(dirname "$0")" || exit

# If BACKUP_PATH ends with ".bak"
    # Use sqlcmd with scripting variables.
    bakPath="$BACKUP_PATH" \
        sqlcmd.exe -E -S localhost -b -i restorebak.sql -v dbName = "$DB_NAME" \
        || { echo "$CMD: Command exited with a non-zero status" > /dev/stderr; exit 2; }
    #! In order to NOT interpret the colon in bakPath ("D:\...") as a command,
    #! pass it as an environment variable.

    # Or inlined?  https://stackoverflow.com/questions/17575321/how-to-pass-variable-from-shell-script-to-sqlplus
# Else if BACKUP_PATH ends with ".mdf"
# ...
)
