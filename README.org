# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Refcard SQL
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:  sql, emacs, yasnippet, snippets, code templates
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:3
#+EXCLUDE_TAGS: noexport

#+PROPERTY:  header-args :eval never :padline no :tangle yes

#+SETUPFILE: ~/.dotfiles/org/theme-readtheorg.setup

* Tasks                                                               :noexport:

** TODO Watch video of SQL Prompt

http://www.red-gate.com/products/sql-development/sql-prompt/

** TODO Look at RedGate snippets

=/cygdrive/c/Users/f.niessen/AppData/Local/Red Gate/SQL Prompt 7/Snippets/=

** TODO Look at SQL Query syntax checker & validator

https://www.eversql.com/sql-syntax-check-validator/

* Sqsh

#+name: current-year
#+begin_src emacs-lisp :eval yes :results silent :tangle no :exports none
(format-time-string "%Y")
#+end_src

#+begin_src conf :tangle ~/.dotfiles/home/.sqshrc
# Hey Emacs, this is a -*- conf -*- file
## .sqshrc - My sqsh initialization file

# Copyright (C) 2010-<<current-year()>> Fabrice Niessen

# Author: Fabrice Niessen <(concat "fni" at-symbol "pirilampo.org")>
# Keywords: sqsh, dotfile, config

#* Connections

# Setting your password within your `.sqshrc' is probably the most secure method
# of using sqsh.  However, make sure that you `chmod go-rwx ~/.sqshrc',
# otherwise you leave yourself wide open to attacks.

\set username="sa"
\set password="mysecret"
\set hostname="localhost"
\set database=[ARCHIBUS_23_2_HQ]

#* Aliasing

#** Display styles

# \set colsep='| '

# Currently supported styles are:
# - horiz (or hor or horizontal) (*) = default
# - vert (or vertical) (*),
# - bcp,
# - csv,
# - html,
# - meta,
# - pretty (*), and
# - none.

\alias goh='\go -m horiz | ${PAGER}'

\alias gov='\go -m vert | ${PAGER}'

# *Very* useful for doing quick bcp commands from command line, and using
# re-direction directly to a file!
\alias gob='\go -m bcp | ${PAGER}'

# Firefox.
\alias gof='\go -m html | (cat > /tmp/sqsh-output.html; /mnt/c/Windows/explorer.exe file:///tmp/sqsh-output.html)'

\alias gom='\go -m meta | ${PAGER}'

\alias gop='\go -m pretty -w80 | ${PAGER}'

#** Aliases for T-SQL commands
#+end_src

#+begin_src conf :tangle ~/.dotfiles/home/.sqshrc
\alias statson='\loop -e "SET STATISTICS IO ON; SET STATISTICS TIME ON;"'
\alias statsoff='\loop -e "SET STATISTICS IO OFF; SET STATISTICS TIME OFF;"'
#+end_src

SQL Server Execution Time: This refers to the time taken by SQL server to
complete the execution of the compiled plan.

*CPU time* refers to the actual time spent on CPU.

The *elapsed time* is the total time to complete the execution which includes
- signal wait time,
- wait time to complete the IO operation and
- time taken to transfer the output to the client.

*CPU time* is really where you want to pay attention for *performance tuning*, as it
can be
- higher than the *elapsed time* if the query goes parallel, or
- lower if the procedure spends time sleeping on wait signals and I/O
  operations.

The *CPU time* can be used to baseline the performance tuning. This value will not
vary much from execution to execution unless you modify the query or data. The
load on the server will not impact much on this value.

The *elapsed time* will depend on many factors, like load on the server, IO load,
network bandwidth between server and client.

So always use the CPU time as baseline while doing the performance tuning.

Want to *format your output* online in a web browser?  The [[http://statisticsparser.com/index.html][Statistics Parser]] will
help with that. Just paste in the output of Statistics IO and/or Statistics Time
and press Parse. Your output will be formatted and totaled. Enjoy.

#+begin_src conf :tangle ~/.dotfiles/home/.sqshrc
\alias planon='\loop -e "SET SHOWPLAN ON"'
\alias planoff='\loop -e "SET SHOWPLAN OFF"'

\alias ton='\loop -e "DBCC TRACEON(3604)"'
\alias toff='\loop -e "DBCC TRACEOFF(3604)"'

\alias tempdb='\loop -e "USE tempdb"'
\alias master='\loop -e "USE master"'

#** Aliases for sqsh commands

\alias DEV='\reconnect -SDEV -Usa -Pmysecret'
\alias STG='\reconnect -SSTG -Usa -Pmysecret'
\alias PRD='\reconnect -c -SPRD -Usa -Pmysecret'

# Clear screen within sqsh session.
\alias clear="\shell clear"

# Read a file into sqsh session.
\alias :r='\buf-load -a !*'
\alias r="\buf-load "

# Drop you into a shell out of sqsh.
\alias sh="\shell "

\alias h="\history"

\alias xx='\reset'

\alias q="\exit"

#* Miscellaneous

# Turn off the sqsh banner; cosmetic only
\set banner=no

\set width=65535

# Have semicolons executing commands (sort of inline "go")...
\set semicolon_hack=on

# Turn on ability to have !-recall commands.
\set history_shorthand=on

# This variable causes sqsh to exit with an exit status of the total number of
# batches that failed during the current session.  This is useful for use within
# shell scripts and the such.
\set exit_failcount=on

\set prompt_color='{0;34;47}'
\set text_color='{0;33}'
\set prompt='$prompt_color{{$username@$DSQUERY:$database}}>$text_color '

# This is for the sake of Emacs.
# Local Variables:
# mode: outline-minor
# End:

## .sqshrc ends here
#+end_src

* Mssql-cli

** Features

New and interactive command line query tool for SQL Server. This open source
tool works cross-platform and is a proud member of the dbcli community.

Features
- Mssql-cli auto-completion that is context aware
- T-SQL IntelliSense
- Syntax highlighting
- Pretty formatting for query results, including Vertical Format
- Multi-line edit mode
- Configuration file support

https://cloudblogs.microsoft.com/sqlserver/2017/12/12/try-mssql-cli-a-new-interactive-command-line-tool-for-sql-server/

** Setup

#+begin_src shell :tangle no
sudo apt install python-pip python-dev
sudo pip install --upgrade pip
sudo pip install mssql-cli
#+end_src

#+begin_src shell :tangle no
mssql-cli -E
kinit.exe user@domain.com
#+end_src

* Emacs YASnippets

A *SQL "snippet"* (or *auto-replacement*) is a frequently used *code template* which
can be inserted into a code you are typing by pressing the TAB key.  It allows
you to write frequently used SQL commands more quickly.

Snippets are categorized into 2 types:

- *Insert Snippets (or Expansion Snippets)*: These are code templates for various
  SQL commands you can quickly insert into your SQL code when creating tables,
  stored procedures, triggers and so on.

- *Surround Snippets:* These are code templates that help you implement code
  constructs such as ~BEGIN...END~, ~IF~, ~WHILE~ and so on.

See https://github.com/gvohra/sqlpromptsnippets or sharing the best Red Gate SQL
Prompt snippets.

https://www.ssmsboost.com/

https://www.ssmstoolspack.com/Download

** Insert Snippet...

*** Cursor

**** [curff] Cursor Fast-Forward

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/curff.yasnippet
# name: Fast-forward read-on...
# --
/* declare variables */
DECLARE @variable INT

DECLARE ${1:cursor_name} CURSOR
FAST_FORWARD READ_ONLY
FOR ${2:select_statement}

OPEN $1

FETCH NEXT FROM $1
INTO @variable

WHILE @@FETCH_STATUS = 0
BEGIN
    $0

    FETCH NEXT FROM $1
    INTO @variable
END

CLOSE $1
DEALLOCATE $1
go
#+end_src

*** Database

**** [cdb] Create DataBase

Create database.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cdb.yasnippet
# name: Create database
# --
USE master
go

-- Drop the database if it already exists.
IF EXISTS (SELECT name
        FROM sys.databases
        WHERE name = N'${1:database_name}')
    DROP DATABASE $1
go

CREATE DATABASE $1
ON
PRIMARY ( -- or use FILEGROUP filegroup_name
  NAME = $1_data,
  FILENAME = '$1.mdf'
) --, and repeat as required
LOG ON
(
  NAME = $1_log,
  FILENAME = '$1.ldf'
) --, and repeat as required
--COLLATE collation_name
--WITH
--  DB_CHAINING ON/OFF
--  TRUSTWORTHY ON/OFF
--FOR LOAD
--FOR ATTACH
--WITH
--  ENABLE_BROKER
--  NEW_BROKER
--  ERROR_BROKER_CONVERSATIONS
--FOR ATTACH_REBUILD_LOG
go
#+end_src

**** [cdbsnap] Create DataBase Snapshot

Create snapshot.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cdbsnap.yasnippet
# name: Create database sna...
# --
USE master
go

-- Drop snapshot database if it already exists.
IF EXISTS (SELECT name
        FROM sys.databases
        WHERE name = N'${1:source_database}_${2:snapshot_id}')
    DROP DATABASE $1_$2
go

-- Create the snapshot database.
CREATE DATABASE $1_$2 ON
( NAME = $1_$2_data,
  FILENAME = '$1_$2.ss')
AS SNAPSHOT OF $1;
go$0
#+end_src

**** [dd] Drop Database

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dd.yasnippet
# name: Drop database
# --
USE master
go

-- Drop the database if it already exists.
IF EXISTS (SELECT name
        FROM sys.databases
        WHERE name = N'${1:database_name}')
    DROP DATABASE $1
go
#+end_src

**** Database Backup

Backup database.

#+begin_src sql :tangle no
# name: Backup database
# --
BACKUP DATABASE ${1:database_name}
    TO DISK = N'Backup_Path/$1.bak'
WITH
    NOFORMAT,
    NOINIT,
    NAME = N'$1-Full Database Backup',
    SKIP,
    STATS = 10;
go
#+end_src

**** Database Restore

Restore database.

#+begin_src sql :tangle no
# name: Restore database
# --
USE master
go

RESTORE DATABASE ${1:database_name}
    FROM DISK = N'Backup_Path/$1.bak'
WITH
    FILE = 1,
    NOUNLOAD,
    REPLACE,
    STATS = 10
go
#+end_src

*** Fragment

**** [cr] Create

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cr.yasnippet
# name: Create fragment
# --
CREATE $0
#+end_src

**** [i] Insert

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/i.yasnippet
# name: INSERT fragment
# --
INSERT
#+end_src

**** [ii] Insert Into

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ii.yasnippet
# name: INSERT INTO fragment
# --
INSERT INTO $0 ()
VALUES ()
#+end_src

**** [s] Select

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/s.yasnippet
# name: SELECT fragment
# --
SELECT
#+end_src

**** [ssf] Select Star From

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ssf.yasnippet
# name: SELECT * FROM frag...
# --
SELECT *
FROM $0
WHERE
#+end_src

**** [sst] Select Top 10

Select top 10 rows.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sst.yasnippet
# name: SELECT top 10 rows
# --
SELECT TOP 10 *
FROM $0
#+end_src

**** [st100] Select Top 100

Select top 100 rows.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/st100.yasnippet
# name: SELECT top 100 rows
# --
SELECT TOP 100 *
FROM $0
#+end_src

**** [scf] Select Count From

Count number of records returned by query.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/scf.yasnippet
# name: Count number of rec...
# --
SELECT FORMAT(COUNT(*), '#,##0')
FROM $0
#+end_src

**** [scgb] Select Count with Group By

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/scgb.yasnippet
# name: Count with group by
# --
SELECT ${1:col}, COUNT(*) FROM $0 GROUP BY $1
#+end_src

**** [num] Format Number

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/num.yasnippet
# name: Format number
# --
FORMAT($0,'#,##0')
#+end_src

**** [smf] Select Sum From

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/smf.yasnippet
# name: SELECT SUM(*) FROM...
# --
SELECT SUM($0)
FROM
#+end_src

**** [f] From

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/f.yasnippet
# name: FROM fragment
# --
FROM
#+end_src

**** [is] INFORMATION_SCHEMA

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/is.yasnippet
# name: INFORMATION_SCH...
# --
INFORMATION_SCHEMA$0
#+end_src

**** [w] Where

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/w.yasnippet
# name: WHERE fragment
# --
WHERE $0
#+end_src

**** [lk] Like

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/lk.yasnippet
# name: LIKE fragment
# --
LIKE '%$0%'
#+end_src

**** [today] Today

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/today.yasnippet
# name: Today fragment
# --
CAST(GETDATE() AS DATE)
#+end_src

**** [now] Now

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/now.yasnippet
# name: Now fragment
# --
`(format-time-string "'%Y-%m-%d %H:%M:%S.%3N'")`
#+end_src

**** [gb] Group By

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/gb.yasnippet
# name: GROUP BY fragment
# --
GROUP BY $0
#+end_src

**** [ha] Having

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ha.yasnippet
# name: HAVING fragment
# --
HAVING
#+end_src

**** [ob] Order By

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ob.yasnippet
# name: ORDER BY fragment
# --
ORDER BY $0
#+end_src

**** [rwn] Row Number

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/rwn.yasnippet
# name: ROW_NUMBER fragment
# --
ROW_NUMBER() OVER(PARTITION BY  ORDER BY )
#+end_src

**** [up] Update

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/up.yasnippet
# name: UPDATE fragment
# --
UPDATE $0
#+end_src

**** [upd] Update

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/upd.yasnippet
# name: UPDATE fragment
# --
UPDATE $0
SET
WHERE
#+end_src

**** [d] Delete

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/d.yasnippet
# name: DELETE frag...
# --
DELETE
#+end_src

**** [df] Delete From

Delete statement.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/df.yasnippet
# name: DELETE FROM frag...
# --
DELETE FROM ${1:[schema].[table_name]}
WHERE $0
#+end_src

**** [tt] Truncate Table

Truncate statement.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/tt.yasnippet
# name: TRUNCATE fragment
# --
TRUNCATE TABLE $0
#+end_src

**** [lin]

to split up code

**** [linn]

as above, with space for commentary

**** [header]

as above, with even  more space

**** [deci] Declare Int

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/deci.yasnippet
# name: DECLARE int fragment
# --
DECLARE @$0 int
#+end_src

**** [decv] Declare Varchar

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/decv.yasnippet
# name: DECLARE varchar fragment
# --
DECLARE @$0 varchar(256)
#+end_src

**** [be] Begin...End

Insert ~BEGIN...END~ block.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/be.yasnippet
# name: BEGIN...END block
# --
BEGIN
    $0
END
#+end_src

**** [tc] Try ... Catch

Insert ~TRY...CATCH~ block.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/tc.yasnippet
# name: TRY ... CATCH fragm...
# --
BEGIN TRY
    $0
END TRY
BEGIN CATCH
    /*
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_SEVERITY() AS ErrorSeverity,
            ERROR_STATE() AS ErrorState,
            ERROR_PROCEDURE() AS ErrorProcedure,
            ERROR_LINE() AS ErrorLine,
            ERROR_MESSAGE() AS ErrorMessage
    */
END CATCH;
#+end_src

**** [ifs] If

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ifs.yasnippet
# name: IF fragment
# --
IF 1 = 1
BEGIN
    $0
END
#+end_src

**** [ex] Exists

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ex.yasnippet
# name: EXISTS fragment
# --
EXISTS
#+end_src

**** [nex] Not Exists

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/nex.yasnippet
# name: NOT EXISTS fragment
# --
NOT EXISTS
#+end_src

**** If Exists

Perform an operation if a selected object exists.

#+begin_src sql :tangle no
# name: ...
# --
IF EXISTS(
 SELECT
 FROM ${1:object})
 BEGIN
    $0
 END
#+end_src

**** Case

#+begin_src sql :tangle no
CASE /*expression*/
    WHEN /*expression*/ THEN /*result_expression*/
    WHEN /*expression*/ THEN /*result_expression*/
    ELSE /*result_expression*/
END
#+end_src

**** [cte] Common Table Expression

Temporary inline view.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cte.yasnippet
# name: WITH cte fragment
# --
;WITH ${1:cte_name} AS
(
    -- SELECT
    -- FROM
    -- GROUP BY
)
-- Statement that executes the common table expression
SELECT $0
FROM $1;
go
#+end_src

**** [wtf] What The Fuck

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/wtf.yasnippet
# name: WTF fragment
# --
WTF???!??!  AAAAAARRRRRRRRRRGGGGGGGGHHHHHHHHHHHHHHHHHHH!!!!!!!!!!!!!!!!!!
#+end_src

*** Function

Naming convention: functions are prefixed with ~ufn~.

**** [ctif] Create Inline Table Function

Creates an inline table function.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/citf.yasnippet
# name: Create inline table-va...
# --
IF OBJECT_ID (N'${1:[schema].[inline_function_name]}', N'IF') IS NOT NULL
    DROP FUNCTION $1;
go

-- ================================================
SET ANSI_NULLS ON
go
SET QUOTED_IDENTIFIER ON
go
-- =============================================
-- Author:      /* Author */
-- Create date: /* Create Date */
-- Description: /* Description */
-- =============================================
CREATE FUNCTION $1 (@${2:parameter_name} ${3:parameter_data_type})
RETURNS TABLE
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
RETURN
(
    -- Add the SELECT statement with parameter references here
    SELECT @$2 AS c1
    $0
);
go

-- =============================================
-- Example to execute function
-- =============================================
SELECT *
FROM $1 /* owner.inline_function_name */
    (/* value_for_@parameter_name */)
go
#+end_src

**** [ctf] Create Multi-Statement Table Function

Creates a multi-statement table function.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ctf.yasnippet
# name: Create multi-stateme...
# --
IF OBJECT_ID (N'${1:[schema].[table_function_name]}', N'TF') IS NOT NULL
    DROP FUNCTION $1;
go

CREATE FUNCTION $1 (@{2:parameter_name} ${3:parameter_data_type})
RETURNS @${4:return_variable_name} TABLE
(
    /* table type definition */
    $2 $3
)
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
BEGIN
    /* function body */
    INSERT @$4
    SELECT 1
    RETURN
END;
go

-- =============================================
-- Example to execute function
-- =============================================
SELECT * FROM $1 /* owner.table_function_name */
    (/* value_for_@parameter_name */)
go
#+end_src

**** [csf] Create Scalar Function

Creates a scalar function.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/csf.yasnippet
# name: Create scalar function
# --
IF OBJECT_ID (N'${1:[schema].[scalar_function_name]}', N'FN') IS NOT NULL
    DROP FUNCTION $1;
go

-- =============================================
SET ANSI_NULLS ON
go
SET QUOTED_IDENTIFIER ON
go
-- =============================================
-- Author:      /* Author */
-- Create date: /* Create Date */
-- Description: /* Description */
-- =============================================
CREATE FUNCTION $1 (@{2:parameter_name} ${3:parameter_data_type})
RETURNS ${4:function_data_type}
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
-- Returns ...
BEGIN
    /* function body */
--  eg.
--  DECLARE @v_ret $4
--  SELECT @v_ret = /* scalar expression */
--  RETURN @v_ret$0
END;
go

-- =============================================
-- Example to execute function
-- =============================================
SELECT $1 /* owner.scalar_function_name */
    (/* value_for_@parameter_name */)
go
#+end_src

**** [af] Alter Function

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/af.yasnippet
# name: ALTER FUNCTION fr...
# --
ALTER FUNCTION $0
#+end_src

**** [dfn] Drop Function

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dfn.yasnippet
# name: Drop function
# --
DROP FUNCTION $0
#+end_src

*** Help

**** [d] Describe object

List or describe database objects. Calls ~sp_help~.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/d.yasnippet
# name: Describe object
# --
EXEC sp_help '${1:object}';
#+end_src

**** [ld] List Databases

List databases.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ld.yasnippet
# name: List Databases
# --
SELECT
    name,
    create_date,
    compatibility_level,
    collation_name
FROM sys.databases
WHERE name LIKE '%%';
#+end_src

A *collation* consists of an enumeration of data and their equivalence to deduce
therefrom the processing behavior of the strings especially in the *comparison*
and *sorting* operations.

- *Code Page --* 1-4 digit number specifying code page.
- *Case Sensitivity --* CS = case sensitive, CI = insensitive.
- *Accent Sensitivity --* AI = accent insensitive, AS = accent sensitive.

Collation ~SQL_Latin1_General_CP1_CI_AI~:

- CP1 = Code Page 1252, that is Latin(ANSI).
- Case-Insensitive.
- Accent-Insensitive.

**** [lf] List Functions

List functions.

**** [li] List Indexes

List indexes.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/li.yasnippet
# name: List Indexes
# --
SELECT
    t.name                              AS "TableName",
    i.name                              AS "IndexName",
    col.name                            AS "ColumnName",
    i.index_id                          AS "IndexId",
    ic.index_column_id                  AS "ColumnId"
FROM sys.indexes                        i
INNER JOIN sys.index_columns            ic
    ON i.object_id = ic.object_id AND i.index_id = ic.index_id
INNER JOIN sys.columns                  col
    ON ic.object_id = col.object_id AND ic.column_id = col.column_id
INNER JOIN sys.tables                   t
    ON i.object_id = t.object_id
WHERE i.is_primary_key = 0
    AND i.is_unique = 0
    AND i.is_unique_constraint = 0
    AND t.is_ms_shipped = 0
    AND i.name LIKE '%%'                -- Index name.
ORDER BY
    t.name,
    i.name,
    i.index_id,
    ic.index_column_id;
#+end_src

A *comma-separated list* of index columns could be an improvement...

***** List unused indexes

#+begin_src sql :tangle no
USE MASTER;
GO
GRANT VIEW SERVER STATE TO afm;
#+end_src

#+begin_src sql :tangle no
SELECT
    OBJECT_NAME(s.object_id)            AS "table_name",
    i.name                              AS "index_name",
    i.index_id,
    user_seeks + user_scans + user_lookups AS "reads",
    user_updates                        AS "writes",
    SUM(p.rows)                         AS "rows",
    last_user_update
FROM sys.dm_db_index_usage_stats        s
JOIN sys.indexes                        i
    ON s.object_id = i.object_id AND i.index_id = s.index_id
JOIN sys.partitions                     p
    ON s.object_id = p.object_id AND p.index_id = s.index_id
WHERE OBJECTPROPERTY(s.object_id, 'IsUserTable') = 1
    AND s.index_id > 0
    AND s.database_id = DB_ID() -- Database ID of the current database.
    AND user_seeks + user_scans + user_lookups = 0
GROUP BY
    OBJECT_NAME(s.object_id),
    i.name,
    i.index_id,
    user_seeks + user_scans + user_lookups,
    user_updates,
    last_user_update
ORDER BY
    writes DESC,
    reads ASC;
#+end_src

If you see indexes where:

- there are no seeks, scans or lookups, but
- there are updates,

this means that SQL Server has not used the index to satisfy a query but still
needs to maintain the index.

#+begin_tip
Remember that the data from these DMVs is reset when SQL Server is restarted, so
make sure you have collected data for a long enough period of time to determine
which indexes may be good candidates to be dropped.
#+end_tip

**** [ll] List Logins

List logins and associated roles.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ll.yasnippet
# name: List Logins
# --
SELECT
    name,
    type_desc,
    default_database_name,
    type,
    create_date
FROM sys.server_principals
WHERE type_desc = 'SQL_LOGIN'
    AND name LIKE '%%'
ORDER BY name;
#+end_src

**** [ls] List Schemas

List schemas.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ls.yasnippet
# name: List Schemas
# --
SELECT
    name,
    schema_id,
    principal_id
FROM sys.schemas
WHERE name LIKE '%%'
#+end_src

**** [lt] List Tables

List tables.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/lt.yasnippet
# name: List Tables
# --
SELECT
    TABLE_CATALOG,
    TABLE_SCHEMA,
    TABLE_NAME,
    TABLE_TYPE
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE'
    AND TABLE_NAME LIKE '%%';
#+end_src

**** [lv] List Views

List views.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/lv.yasnippet
# name: List Views
# --
SELECT
    table_catalog AS catalog,
    TABLE_SCHEMA AS schema_name,
    TABLE_NAME AS view_name
FROM INFORMATION_SCHEMA.VIEWS
WHERE TABLE_NAME LIKE '%%';
#+end_src

**** [sf] Show Function

Show a function's definition.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sf.yasnippet
# name: Show Function
# --
SELECT OBJECT_DEFINITION(OBJECT_ID('${1:funcname}'));
#+end_src

**** [sis] Search In Sources

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sis.yasnippet
# name: Search In Sources
# --
/*
This is an easy way to look through the sources of all objects in the database
if you need to find particular string. This script can be used, for example,
to find references of some specific object by other objects. Depending on the
size of your database you might want to limit the search scope to particular
object type. Just comment unneeded object types in WHERE statement.
Enter search string between %% marks in @SearchPattern initialisation statement.
When you get the results you can copy object name from "FullName" column and
use SSMSBoost to quickly locate it in the object explorer, or you can continue
searching in results using "Find in ResultsGrid" function.

This script is provided to you by SSMSBoost as is. Improvements and comments are welcome.
Redistribution with reference to SSMSBoost project website is welcome.
SSMSBoost team, 2014
*/
DECLARE @SearchPattern NVARCHAR(128)

SET @SearchPattern = '%$0%'

SELECT
    SCHEMA_NAME(o.schema_id) AS [schema],
    o.[name],
    o.[type],
    '['+SCHEMA_NAME(o.schema_id)+'].['+o.[name]+']' AS [FullName],
    OBJECT_DEFINITION(object_id) AS [Source]
FROM sys.objects AS o
WHERE LOWER(OBJECT_DEFINITION(o.object_id)) LIKE LOWER(@SearchPattern)
    AND o.[type] IN (
    'C', --- = Check constraint
    'D', --- = Default (constraint or stand-alone)
    'P', --- = SQL stored procedure
    'FN', --- = SQL scalar function
    'R', --- = Rule
    'RF', --- = Replication filter procedure
    'TR', --- = SQL trigger (schema-scoped DML trigger, or DDL trigger at either the database or server scope)
    'IF', --- = SQL inline table-valued function
    'TF', --- = SQL table-valued function
    'V') --- = View
UNION ALL
SELECT
    SCHEMA_NAME(q.schema_id) AS [schema],
    q.[name],
    'SQ' AS [type],
    '['+SCHEMA_NAME(q.schema_id)+'].['+q.[name]+']' AS [FullName],
    activation_procedure AS [Source]
FROM sys.service_queues q
WHERE q.activation_procedure LIKE LOWER(@SearchPattern)
ORDER BY
    o.[type],
    o.[name];
#+end_src

*** Index

**** [crunq] Create Unique Index

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/crunq.yasnippet
# name: Create unique index
# --
CREATE UNIQUE INDEX unq_$0
ON
#+end_src

**** [cni] Create Non-Clustered Index (crnci)

Creates a basic, non-clustered index.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cni.yasnippet
# name: Create non-unique n...
# --
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'nci_${3:index_name}')
    DROP INDEX nci_$3 ON ${1:[schema].[owner_name]};
go

CREATE NONCLUSTERED INDEX nci_$3
ON $1 (${2:column})
--WITH PAD_INDEX
--    | FILLFACTOR = fillfactor
--    | IGNORE_DUP_KEY
--    | DROP_EXISTING
--    | STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
-- ON filegroup
go
$0
#+end_src

**** [cuni] Create Unique Non-Clustered Index

Creates a unique, non-clustered index.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cuni.yasnippet
# name: Create unique nonclu...
# --
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'unq_${3:index_name}')
    DROP INDEX unq_$3 ON ${1:[schema].[owner_name]};
go

CREATE UNIQUE NONCLUSTERED INDEX unq_$3
ON $1 (${2:column})
--WITH
--    PAD_INDEX,
--    FILLFACTOR = fillfactor,
--    IGNORE_DUP_KEY,
--    DROP_EXISTING = OFF,
--    STATISTICS_NORECOMPUTE,
--    SORT_IN_TEMPDB = OFF, .. as required
ON ${4:filegroup_name}
go
$0
#+end_src

**** [cci] Create Clustered Index (crci)

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cci.yasnippet
# name: Create non-unique cl...
# --
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'ci_${3:index_name}')
    DROP INDEX ci_$3 ON ${1:[schema].[owner_name]};
go

CREATE CLUSTERED INDEX ci_$3
ON $1 (${2:column})
--WITH PAD_INDEX
--    | FILLFACTOR = fillfactor
--    | IGNORE_DUP_KEY
--    | DROP_EXISTING
--    | STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
-- ON filegroup
go
$0
#+end_src

**** [cuci] Create Unique Clustered Index

Create index full syntax.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cuci.yasnippet
# name: Create unique cluster...
# --
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'unq_${3:index_name}')
    DROP INDEX unq_$3 ON ${1:[schema].[owner_name]};
go

CREATE UNIQUE CLUSTERED INDEX unq_$3
ON $1 (${2:column})
WITH
PAD_INDEX,
FILLFACTOR = ${5:fillfactor_value},
IGNORE_DUP_KEY,
DROP_EXISTING,
STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
ON ${4:filegroup_name}
go
$0
#+end_src

**** [di] Drop Index

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/di.yasnippet
# name: Drop index
# --
DROP INDEX $0
#+end_src

*** Join fragment

**** [j] Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/j.yasnippet
# name: JOIN fragment
# --
JOIN $0
#+end_src

**** [cj] Cross Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cj.yasnippet
# name: CROSS JOIN fragment
# --
CROSS JOIN $0
#+end_src

**** [fj] Full Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/fj.yasnippet
# name: FULL JOIN fragment
# --
FULL JOIN $0
#+end_src

**** [foj] Full Outer Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/foj.yasnippet
# name: FULL OUTER JOIN fr...
# --
FULL OUTER JOIN $0
#+end_src

**** [ij] Inner Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ij.yasnippet
# name: INNER JOIN fragment
# --
INNER JOIN $0
#+end_src

**** [j] Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/j.yasnippet
# name: JOIN fragment
# --
JOIN $0
#+end_src

**** [lj] Left Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/lj.yasnippet
# name: LEFT JOIN fragment
# --
LEFT JOIN $0
#+end_src

**** [loj] Left Outer Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/loj.yasnippet
# name: LEFT OUTER JOIN fr...
# --
LEFT OUTER JOIN $0
#+end_src

**** [rj] Right Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/rj.yasnippet
# name: RIGHT JOIN fragment
# --
RIGHT JOIN $0
#+end_src

**** [roj] Right Outer Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/roj.yasnippet
# name: RIGHT OUTER JOIN f...
# --
RIGHT OUTER JOIN $0
#+end_src

*** Login

**** [cl] Create SQL Authentication Login

Creates a SQL Server Authentication login.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cl.yasnippet
# name: CREATE SQL Server l...
# --
CREATE LOGIN ${1:SQL_login_name}
WITH PASSWORD = N'${2:Strong_P@ssword}'$0 /* HASHED */ /* MUST_CHANGE */
--  DEFAULT_DATABASE = database
--  DEFAULT_LANGUAGE = language
--  CHECK_POLICY = ON | OFF
--  SID = sid
--  CHECK_EXPIRATION = ON | OFF
--  CREDENTIAL = credential_name
go
#+end_src

**** Create Windows Authentication Login

Creates a Windows Authentication login.

#+begin_src sql :tangle no
# name: CREATE Windows l...
# --
CREATE LOGIN ${1:[domain_name\user_name]}
FROM WINDOWS$0
WITH
DEFAULT_DATABASE = ${2:default_database}
--  DEFAULT_LANGUAGE = language
--  CERTIFICATE certificate_name
--  ASYMMETRIC KEY key_name
go
#+end_src

**** [dl] Drop Login

Drop login.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dl.yasnippet
# name: Drop login
# --
DROP LOGIN ${1:SQL_login_name}
go
#+end_src

*** Role

**** Create Role

Create Database Role.

#+begin_src sql :tangle no
USE ${1:database_name}
go

CREATE ROLE ${2:role_name}$0
go
#+end_src

*** Schema

**** Create Schema

Create a database schema.

#+begin_src sql :tangle no
CREATE SCHEMA ${1:schema}$0
#+end_src

*** Set options

**** [san] Set ANSI_NULLS

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/san.yasnippet
# name: Change the current A...
# --
SET ANSI_NULLS ON$0
#+end_src

**** [sqi] Set QUOTED_IDENTIFIER

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sqi.yasnippet
# name: Change the current ...
# --
SET QUOTED_IDENTIFIER ON$0
#+end_src

**** [sxa] Set XACT_ABORT

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sxa.yasnippet
# name: Change the current X...
# --
SET XACT_ABORT OFF$0
#+end_src

*** Stored Procedure

Naming convention: stored procedures are prefixed with ~usp~.

**** [cp] Create Procedure Basic Template

Create a simple stored procedure with output parameter.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cp.yasnippet
# name: Create stored proced...
# --
-- Drop stored procedure if it already exists
IF OBJECT_ID ('${1:[schema].[procedure_name]}', 'P') IS NOT NULL
    DROP PROCEDURE $1;
go

-- =============================================
SET ANSI_NULLS ON
go
SET QUOTED_IDENTIFIER ON
go
-- =============================================
-- Author:      /* Author */
-- Create date: /* Create Date */
-- Description: /* Description */
-- =============================================
CREATE PROCEDURE $1
    -- Add the parameters for the function here
    @${2:parameter_name_1} ${3:parameter_data_type_1} = ${4:default_value_for_parameter_1}
    @${5:parameter_name_2} ${6:parameter_data_type_2} OUTPUT
-- WITH ENCRYPTION, RECOMPILE, EXECUTE AS CALLER|SELF|OWNER| 'user_name'
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    -- Insert statements for procedure here
    SELECT @$2$0
END
go

--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--go

-- =============================================
-- Example to execute the stored procedure
-- =============================================
DECLARE @${7:variable_for_output_parameter} $6

EXECUTE $1 /* value_for_parameter_1 */, $7 OUTPUT

SELECT $7
go
#+end_src

**** [crlp] Create CLR Procedure

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/clrp.yasnippet
# name: Create CLR stored pr...
# --
--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--go

CREATE PROCEDURE ${1:[schema].[procedure_name]}
(
    @${2:parameter_name} ${3:parameter_data_type}
)
-- WITH EXECUTE AS CALLER|SELF|OWNER| 'user_name'
AS EXTERNAL NAME ${4:[assembly].[class].[method]};
go

--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--go$0
#+end_src

**** [ap] Alter Procedure

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ap.yasnippet
# name: ALTER PROCEDURE
# --
ALTER PROCEDURE $0
#+end_src

**** [dp] Drop Procedure

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dp.yasnippet
# name: Drop stored procedure
# --
DROP PROCEDURE $0
#+end_src

*** Synonym

**** Create Synonym

Creates a synonym.

#+begin_src sql :tangle no
CREATE SYNONYM ${1:[schema].[synonym_name]}
FOR ${2:[schema].[object_name]};
go$0
#+end_src

*** Table

**** [ct] Create Table (crt)

Creates a table (and drop previous one with the same name).

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ct.yasnippet
# name: Create table
# --
IF OBJECT_ID ('${1:[schema].[table_name]}', 'U') IS NOT NULL
    DROP TABLE $1;
go

CREATE TABLE $1
(
    ${2:column_1} ${3:data_type_1} ${4:column_nullability_1},
    ${5:column_2} ${6:data_type_2} ${5:column_nullability_2},$0
    CONSTRAINT /* contraint_name */ PRIMARY KEY (/* columns_in_primary_key */)
);
go
#+end_src

**** [ctt] Create Temporary Table (crtt)

Creates a temporary table.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ctt.yasnippet
# name: Create temp table
# --
CREATE TABLE #temp
(
    $0
);
go
#+end_src

**** [ctv] Create Table Variable (crtv)

Creates a table variable.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ctv.yasnippet
# name: Create table var
# --
DECLARE @tbl TABLE
(
    $0
)
#+end_src

**** [at] Alter Table fragment

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/at.yasnippet
# name: ALTER TABLE fragm...
# --
ALTER TABLE $0
#+end_src

**** [ata] Add Column

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ata.yasnippet
# name: Add column
# --
-- Add a new column to the table.
ALTER TABLE ${1:[schema].[table_name]}
    ADD [${2:new_column_name}] ${3:data_type} ${4:new_column_nullability};
go$0
#+end_src

**** [atac] Modify Column

#+begin_warning
Running ~ALTER COLUMN~ without mentioning attribute ~NOT NULL~ will result in the
column being changed to *nullable*, if it is already not.
#+end_warning

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atac.yasnippet
# name: Modify column
# --
-- WARNING: If the column is not nullable, specify attribute NOT NULL.
ALTER TABLE ${1:[schema].[table_name]}
    ALTER COLUMN $0;
go
#+end_src

**** [atd] Drop column

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atd.yasnippet
# name: Drop column
# --
-- Drop a column from the table.
ALTER TABLE ${1:[schema].[table_name]}
    DROP COLUMN $0;
go
#+end_src

**** [crc] Add Constraint

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/crc.yasnippet
# name: Add constraint
# --
ALTER TABLE ${1:[schema].[table_name]}
    ADD CONSTRAINT ${2:constraint_name};
go
#+end_src

**** [atdc] Drop Constraint

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atdc.yasnippet
# name: Drop constraint
# --
ALTER TABLE ${1:[schema].[table_name]}
    DROP CONSTRAINT ${2:constraint_name};
go
#+end_src

**** [dt] Drop Table

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dt.yasnippet
# name: Drop table
# --
IF EXISTS (SELECT *
             FROM sys.tables
             JOIN sys.schemas
               ON sys.tables.schema_id = sys.schemas.schema_id
            WHERE sys.schemas.name = N'${1:schema}'
              AND sys.tables.name = N'${2:table}')
    DROP TABLE $1.$2
go
#+end_src

*** Transaction

**** [bt] Begin Transaction

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/bt.yasnippet
# name: Begin transaction
# --
BEGIN TRANSACTION $0
#+end_src

**** [ctr] Commit Transaction

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ctr.yasnippet
# name: Commit transaction
# --
COMMIT TRANSACTION $0
#+end_src

**** [rt] Rollback Transaction

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/rt.yasnippet
# name: Rollback transaction
# --
ROLLBACK TRANSACTION $0
#+end_src

*** Trigger

**** Create Trigger

Creates a trigger.

#+begin_src sql :tangle no
# name: Create trigger
# --
IF OBJECT_ID ('${1:trigger_name}', 'TR') IS NOT NULL
    DROP TRIGGER $1;
go

-- =============================================
SET ANSI_NULLS ON
go
SET QUOTED_IDENTIFIER ON
go
-- =============================================
-- Author:      /* Author */
-- Create date: /* Create Date */
-- Description: /* Description */
-- =============================================
CREATE TRIGGER $1
ON ${2:[schema].[table_name]}
FOR INSERT, UPDATE, DELETE
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    -- Insert statements for trigger here
    RAISERROR (50009, 16, 10)
    $0
END;
go
#+end_src

**** Enable Trigger

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atet.yasnippet
# name: Enable trigger
# --
ALTER TABLE ${1:[schema].[table_name]} ENABLE TRIGGER $0;
#+end_src

**** Enable All Triggers

Enable all triggers on table.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ateta.yasnippet
# name: Enable all triggers on...
# --
ALTER TABLE ${1:[schema].[table_name]}$0 ENABLE TRIGGER ALL;
go
#+end_src

**** Disable Trigger

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atdt.yasnippet
# name: Disable trigger
# --
ALTER TABLE ${1:[schema].[table_name]} DISABLE TRIGGER $0;
#+end_src

**** Disable All Triggers

Disable all triggers on table.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atdta.yasnippet
# name: Disable all triggers on...
# --
ALTER TABLE ${1:[schema].[table_name]}$0 DISABLE TRIGGER ALL;
go
#+end_src

*** User

**** [cu] Create User

Creates a database user.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cu.yasnippet
# name: Create database user
# --
CREATE USER ${1:UserName}$0
FOR /* FROM */ LOGIN /* login_name */
--  CERTIFICATE certificate_name
--  ASYMMETRIC KEY key_name
--  WITHOUT LOGIN
--  WITH DEFAULT_SCHEMA = schema_name
go
#+end_src

**** [du] Drop User

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/du.yasnippet
# name: Drop user
# --
DROP USER ${1:user_name}
go
#+end_src

*** User Defined Data Type

**** Create User-Defined Data Type

Creates a user-defined data type.

#+begin_src sql :tangle no
CREATE TYPE ${1:[schema].[my_data_type]}
FROM ${2:data_type} ${3:column_nullability}
#+end_src

*** User Defined Table Type

**** Create User-Defined Table Type

Creates a user-defined table type.

#+begin_src sql :tangle no
CREATE TYPE ${1:[schema].[my_table_type]} AS TABLE
(
    ${2:column_1} ${3:data_type_1},
    ${4:column_2} ${5:data_type_2}
);
go$0
#+end_src

*** User Defined Type

**** Create User-Defined Type

Creates a CLR integration user-defined type.

#+begin_src sql :tangle no
CREATE TYPE ${1:Utf8String}
EXTERNAL NAME ${2:utf8string}.${3:[Microsoft.Samples.SqlServer.utf8string]};
go$0
#+end_src

*** View

**** [cv] Create View

Creates a view.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cv.yasnippet
# name: Create view
# --
IF OBJECT_ID ('${1:[schema].[view_name]}', 'V') IS NOT NULL
    DROP VIEW $1;
go

CREATE VIEW $1
--WITH ENCRYPTION, SCHEMABINDING, VIEW_METADATA
AS
    SELECT *
    FROM ${2:[schema].[sample_table]}
    $0
-- WITH CHECK OPTION
go
#+end_src

**** [dv] Drop View

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dv.yasnippet
# name: Drop view
# --
DROP VIEW $0
#+end_src

*** --- Miscellaneous ---

**** [e] Execute

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/e.yasnippet
# name: EXECUTE fragment
# --
EXECUTE
#+end_src

**** [sph] sp_help

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sph.yasnippet
# name: Execute sp_help
# --
EXEC sp_help$0
#+end_src

**** [spt] sp_helptext

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/spt.yasnippet
# name: Execute sp_helptext
# --
EXEC sp_helptext$0
#+end_src

**** [xpfd] xp_fixeddrives

Retrieve free space on all fixed drives.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/xpfd.yasnippet
# name: Retrieve free space o...
# --
EXEC master..xp_fixeddrives
#+end_src

**** [w2] Who2

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/w2.yasnippet
# name: Execute sp_who2$0
# --
EXEC sp_who2$0
#+end_src

**** [err] @@ERROR

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/err.yasnippet
# name: @@ERROR function ...
# --
@@ERROR$0
#+end_src

**** [mro] Most Recent Objects

Retrieve 20 most recently created objects.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/mro.yasnippet
# name: Retrieve 20 most rec...
# --
SELECT TOP 20 [name], [type], crdate
FROM sysobjects
ORDER BY crdate DESC
#+end_src

**** Comment

A comment block.

#+begin_src sql :tangle no
/*
 * $0
 */
#+end_src

**** Comment

A multiline comment block.

#+begin_src sql :tangle no
/*******************************************
 * $0
 *******************************************/
#+end_src

** Surround With...

*** [begin] Code Snippet for BEGIN...END block

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/begin.yasnippet
# name: Surround with BEGIN...
# --
BEGIN
`yas-selected-text`
END
#+end_src

*** [if] Code Snippet for IF construct

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/if.yasnippet
# name: Surround with IF...
# --
IF (${1:Condition})
BEGIN
`yas-selected-text`
END
 #+end_src

*** [while] Code Snippet for WHILE loop

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/while.yasnippet
# name: Surround with WHILE...
# --
WHILE (${1:Condition})
BEGIN
`yas-selected-text`
END
 #+end_src
