# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Refcard SQL
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:  sql, emacs, yasnippet, snippets, code templates
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2
#+EXCLUDE_TAGS: noexport

#+PROPERTY:  header-args :eval never :padline no :tangle yes

#+SETUPFILE: ~/.dotfiles/org/theme-readtheorg.setup

* Tasks                                                               :noexport:

** TODO Watch video of SQL Prompt

http://www.red-gate.com/products/sql-development/sql-prompt/

** TODO Look at RedGate snippets

/cygdrive/c/Users/f.niessen/AppData/Local/Red Gate/SQL Prompt 7/Snippets/

* SQL YASnippets

A *SQL snippet* is a frequently used *code template* which can be inserted into
a code you are typing by pressing the TAB key.

Snippets are categorized into 2 types:

- *Insert Snippets (or Expansion Snippets)*: These are code templates for various
  SQL commands you can quickly insert into your SQL code when creating tables,
  stored procedures, triggers and so on.

- *Surround Snippets:* These are code templates that help you implement code
  constructs such as ~BEGIN...END~, ~IF~, ~WHILE~ and so on.

** Insert Snippet...

*** Cursor

**** [curff] Cursor Fast-Forward

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/curff.yasnippet
# name: Fast-forward read-on...
# --
/* declare variables */
DECLARE @variable INT

DECLARE ${1:cursor_name} CURSOR
FAST_FORWARD READ_ONLY
FOR ${2:select_statement}

OPEN $1

FETCH NEXT FROM $1
INTO @variable

WHILE @@FETCH_STATUS = 0
BEGIN
    $0

    FETCH NEXT FROM $1
    INTO @variable
END

CLOSE $1
DEALLOCATE $1
go
#+end_src

*** Database

**** [cdb] Create DataBase

Create database.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cdb.yasnippet
# name: Create database
# --
USE master
go

-- Drop the database if it already exists
IF EXISTS (SELECT name
        FROM sys.databases
        WHERE name = N'${1:database_name}')
    DROP DATABASE $1
go

CREATE DATABASE $1
ON
PRIMARY ( -- or use FILEGROUP filegroup_name
  NAME = $1_data,
  FILENAME = '$1.mdf'
) --, and repeat as required
LOG ON
(
  NAME = $1_log,
  FILENAME = '$1.ldf'
) --, and repeat as required
--COLLATE collation_name
--WITH
--  DB_CHAINING ON/OFF
--  TRUSTWORTHY ON/OFF
--FOR LOAD
--FOR ATTACH
--WITH
--  ENABLE_BROKER
--  NEW_BROKER
--  ERROR_BROKER_CONVERSATIONS
--FOR ATTACH_REBUILD_LOG
go
#+end_src

**** [cdbsnap] Create DataBase Snapshot

Create snapshot.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cdbsnap.yasnippet
# name: Create database sna...
# --
USE master
go

-- Drop snapshot database if it already exists
IF EXISTS (SELECT name
        FROM sys.databases
        WHERE name = N'${1:source_database}_${2:snapshot_id}')
    DROP DATABASE $1_$2
go

-- Create the snapshot database
CREATE DATABASE $1_$2 ON
( NAME = $1_$2_data,
  FILENAME = '$1_$2.ss')
AS SNAPSHOT OF $1;
go$0
#+end_src

**** [dd] Drop Database

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dd.yasnippet
# name: Drop database
# --
USE master
go

-- Drop the database if it already exists
IF EXISTS (SELECT name
        FROM sys.databases
        WHERE name = N'${1:database_name}')
    DROP DATABASE $1
go
#+end_src

**** Database Backup

Backup database.

#+begin_src sql :tangle no
# name: Backup database
# --
BACKUP DATABASE ${1:database_name}
    TO DISK = N'Backup_Path/$1.bak'
WITH
    NOFORMAT,
    NOINIT,
    NAME = N'$1-Full Database Backup',
    SKIP,
    STATS = 10;
go
#+end_src

**** Database Restore

Restore database.

#+begin_src sql :tangle no
# name: Restore database
# --
USE master
go

RESTORE DATABASE ${1:database_name}
    FROM DISK = N'Backup_Path/$1.bak'
WITH
    FILE = 1,
    NOUNLOAD,
    REPLACE,
    STATS = 10
go
#+end_src

*** Fragment

**** [ii] Insert Into

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ii.yasnippet
# name: INSERT INTO fragment
# --
INSERT INTO $0
#+end_src

**** [ssf] Select Star From

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ssf.yasnippet
# name: SELECT * FROM frag...
# --
SELECT * FROM $0
#+end_src

**** [st100] Select Top 100

Select top 100 rows.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/st100.yasnippet
# name: SELECT top 100 rows
# --
SELECT TOP 100 *
FROM $0
#+end_src

**** [scf] Select Count From

Count number of records returned by query.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/scf.yasnippet
# name: Count number of rec...
# --
SELECT COUNT(*) FROM $0
#+end_src

**** [is] INFORMATION_SCHEMA

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/is.yasnippet
# name: INFORMATION_SCH...
# --
INFORMATION_SCHEMA$0
#+end_src

**** [gb] Group By

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/gb.yasnippet
# name: GROUP BY fragment
# --
GROUP BY $0
#+end_src

**** [ob] Order By

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ob.yasnippet
# name: ORDER BY fragment
# --
ORDER BY $0
#+end_src

**** [df] Delete From

Delete statement.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/df.yasnippet
# name: DELETE FROM frag...
# --
DELETE FROM ${1:[schema].[table_name]}
WHERE $0
#+end_src

**** [be] Begin...End

Insert ~BEGIN...END~ block.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/be.yasnippet
# name: BEGIN...END block
# --
BEGIN
    $0
END
#+end_src

**** [tc] Try ... Catch

Insert ~TRY...CATCH~ block.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/tc.yasnippet
# name: TRY ... CATCH fragm...
# --
BEGIN TRY
    $0
END TRY
BEGIN CATCH
    /*
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_SEVERITY() AS ErrorSeverity,
            ERROR_STATE() AS ErrorState,
            ERROR_PROCEDURE() AS ErrorProcedure,
            ERROR_LINE() AS ErrorLine,
            ERROR_MESSAGE() AS ErrorMessage
    */
END CATCH;
#+end_src

**** [ifs] If

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ifs.yasnippet
# name: IF fragment
# --
IF 1 = 1
BEGIN
    $0
END
#+end_src

**** If Exists

Perform an operation if a selected object exists.

#+begin_src sql :tangle no
# name: ...
# --
IF EXISTS(
 SELECT
 FROM ${1:object})
 BEGIN
    $0
 END
#+end_src

**** Case

#+begin_src sql :tangle no
CASE /*expression*/
    WHEN /*expression*/ THEN /*result_expression*/
    WHEN /*expression*/ THEN /*result_expression*/
    ELSE /*result_expression*/
END
#+end_src

**** [cte] Common Table Expression

Temporary inline view.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cte.yasnippet
# name: WITH cte fragment
# --
WITH ${1:cte_name} AS
(
    -- SELECT
    -- FROM
    -- GROUP BY
)
-- Statement that executes the common table expression
SELECT $0
FROM $1;
go
#+end_src

*** Function

Naming convention: functions are prefixed with ~ufn~.

**** [ctif] Create Inline Table Function

Creates an inline table function.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/citf.yasnippet
# name: Create inline table-va...
# --
IF OBJECT_ID (N'${1:[schema].[inline_function_name]}', N'IF') IS NOT NULL
    DROP FUNCTION $1;
go

-- ================================================
SET ANSI_NULLS ON
go
SET QUOTED_IDENTIFIER ON
go
-- =============================================
-- Author:      /* Author */
-- Create date: /* Create Date */
-- Description: /* Description */
-- =============================================
CREATE FUNCTION $1 (@${2:parameter_name} ${3:parameter_data_type})
RETURNS TABLE
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
RETURN
(
    -- Add the SELECT statement with parameter references here
    SELECT @$2 AS c1
    $0
);
go

-- =============================================
-- Example to execute function
-- =============================================
SELECT *
FROM $1 /* owner.inline_function_name */
    (/* value_for_@parameter_name */)
go
#+end_src

**** [ctf] Create Multi-Statement Table Function

Creates a multi-statement table function.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ctf.yasnippet
# name: Create multi-stateme...
# --
IF OBJECT_ID (N'${1:[schema].[table_function_name]}', N'TF') IS NOT NULL
    DROP FUNCTION $1;
go

CREATE FUNCTION $1 (@{2:parameter_name} ${3:parameter_data_type})
RETURNS @${4:return_variable_name} TABLE
(
    /* table type definition */
    $2 $3
)
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
BEGIN
    /* function body */
    INSERT @$4
    SELECT 1
    RETURN
END;
go

-- =============================================
-- Example to execute function
-- =============================================
SELECT * FROM $1 /* owner.table_function_name */
    (/* value_for_@parameter_name */)
go
#+end_src

**** [csf] Create Scalar Function

Creates a scalar function.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/csf.yasnippet
# name: Create scalar function
# --
IF OBJECT_ID (N'${1:[schema].[scalar_function_name]}', N'FN') IS NOT NULL
    DROP FUNCTION $1;
go

-- =============================================
SET ANSI_NULLS ON
go
SET QUOTED_IDENTIFIER ON
go
-- =============================================
-- Author:      /* Author */
-- Create date: /* Create Date */
-- Description: /* Description */
-- =============================================
CREATE FUNCTION $1 (@{2:parameter_name} ${3:parameter_data_type})
RETURNS ${4:function_data_type}
--WITH ENCRYPTION|SCHEMABINDING, ...
AS
-- Returns ...
BEGIN
    /* function body */
--  eg.
--  DECLARE @v_ret $4
--  SELECT @v_ret = /* scalar expression */
--  RETURN @v_ret$0
END;
go

-- =============================================
-- Example to execute function
-- =============================================
SELECT $1 /* owner.scalar_function_name */
    (/* value_for_@parameter_name */)
go
#+end_src

**** [af] Alter Function

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/af.yasnippet
# name: ALTER FUNCTION fr...
# --
ALTER FUNCTION $0
#+end_src

**** [dfn] Drop Function

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dfn.yasnippet
# name: Drop function
# --
DROP FUNCTION $0
#+end_src

*** Index

**** [cni] Create Non-Clustered Index

Creates a basic, non-clustered index.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cni.yasnippet
# name: Create non-unique n...
# --
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'${3:index_name}')
    DROP INDEX $3 ON ${1:[schema].[owner_name]};
go

CREATE NONCLUSTERED INDEX $3
ON $1 (${2:column})
--WITH PAD_INDEX
--    | FILLFACTOR = fillfactor
--    | IGNORE_DUP_KEY
--    | DROP_EXISTING
--    | STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
-- ON filegroup
go
$0
#+end_src

**** [cuni] Create Unique Non-Clustered Index

Creates a unique, non-clustered index.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cuni.yasnippet
# name: Create unique nonclu...
# --
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'${3:index_name}')
    DROP INDEX $3 ON ${1:[schema].[owner_name]};
go

CREATE UNIQUE NONCLUSTERED INDEX $3
ON $1 (${2:column})
--WITH
--    PAD_INDEX,
--    FILLFACTOR = fillfactor,
--    IGNORE_DUP_KEY,
--    DROP_EXISTING = OFF,
--    STATISTICS_NORECOMPUTE,
--    SORT_IN_TEMPDB = OFF, .. as required
ON ${3:filegroup_name}
go
$0
#+end_src

**** [cci] Create Clustered Index

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cci.yasnippet
# name: Create non-unique cl...
# --
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'${3:index_name}')
    DROP INDEX $3 ON ${1:[schema].[owner_name]};
go

CREATE CLUSTERED INDEX $3
ON $1 (${2:column})
--WITH PAD_INDEX
--    | FILLFACTOR = fillfactor
--    | IGNORE_DUP_KEY
--    | DROP_EXISTING
--    | STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
-- ON filegroup
go
$0
#+end_src

**** [cuci] Create Unique Clustered Index

Create index full syntax.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cuci.yasnippet
# name: Create unique cluster...
# --
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'${3:index_name}')
    DROP INDEX $3 ON ${1:[schema].[owner_name]};
go

CREATE UNIQUE CLUSTERED INDEX $3
ON $1 (${2:column})
WITH
PAD_INDEX,
FILLFACTOR = ${3:fillfactor_value},
IGNORE_DUP_KEY,
DROP_EXISTING,
STATISTICS_NORECOMPUTE
--    | SORT_IN_TEMPDB, .. as required
ON ${4:filegroup_name}
go
$0
#+end_src

**** [di] Drop Index

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/di.yasnippet
# name: Drop index
# --
DROP INDEX $0
#+end_src

*** Join fragment

**** [cj] Cross Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cj.yasnippet
# name: CROSS JOIN fragment
# --
CROSS JOIN $0
#+end_src

**** [fj] Full Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/fj.yasnippet
# name: FULL JOIN fragment
# --
FULL JOIN $0
#+end_src

**** [foj] Full Outer Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/foj.yasnippet
# name: FULL OUTER JOIN fr...
# --
FULL OUTER JOIN $0
#+end_src

**** [ij] Inner Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ij.yasnippet
# name: INNER JOIN fragment
# --
INNER JOIN $0
#+end_src

**** [j] Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/j.yasnippet
# name: JOIN fragment
# --
JOIN $0
#+end_src

**** [lj] Left Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/lj.yasnippet
# name: LEFT JOIN fragment
# --
LEFT JOIN $0
#+end_src

**** [loj] Left Outer Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/loj.yasnippet
# name: LEFT OUTER JOIN fr...
# --
LEFT OUTER JOIN $0
#+end_src

**** [rj] Right Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/rj.yasnippet
# name: RIGHT JOIN fragment
# --
RIGHT JOIN $0
#+end_src

**** [roj] Right Outer Join

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/roj.yasnippet
# name: RIGHT OUTER JOIN f...
# --
RIGHT OUTER JOIN $0
#+end_src

*** Login

**** [cl] Create SQL Authentication Login

Creates a SQL Server Authentication login.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cl.yasnippet
# name: CREATE SQL Server l...
# --
CREATE LOGIN ${1:SQL_login_name}
WITH PASSWORD = N'${2:Strong_P@ssword}'$0 /* HASHED */ /* MUST_CHANGE */
--  DEFAULT_DATABASE = database
--  DEFAULT_LANGUAGE = language
--  CHECK_POLICY = ON | OFF
--  SID = sid
--  CHECK_EXPIRATION = ON | OFF
--  CREDENTIAL = credential_name
go
#+end_src

**** Create Windows Authentication Login

Creates a Windows Authentication login.

#+begin_src sql :tangle no
# name: CREATE Windows l...
# --
CREATE LOGIN ${1:[domain_name\user_name]}
FROM WINDOWS$0
WITH
DEFAULT_DATABASE = ${2:default_database}
--  DEFAULT_LANGUAGE = language
--  CERTIFICATE certificate_name
--  ASYMMETRIC KEY key_name
go
#+end_src

**** [dl] Drop Login

Drop login.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dl.yasnippet
# name: Drop login
# --
DROP LOGIN ${1:SQL_login_name}
go
#+end_src

*** Role

**** Create Role

Create Database Role.

#+begin_src sql :tangle no
USE ${1:database_name}
go

CREATE ROLE ${2:role_name}$0
go
#+end_src

*** Schema

**** Create Schema

Create a database schema.

#+begin_src sql :tangle no
CREATE SCHEMA ${1:schema}$0
#+end_src

*** Set options

**** [san] Set ANSI_NULLS

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/san.yasnippet
# name: Change the current A...
# --
SET ANSI_NULLS ON$0
#+end_src

**** [sqi] Set QUOTED_IDENTIFIER

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sqi.yasnippet
# name: Change the current ...
# --
SET QUOTED_IDENTIFIER ON$0
#+end_src

**** [sxa] Set XACT_ABORT

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sxa.yasnippet
# name: Change the current X...
# --
SET XACT_ABORT OFF$0
#+end_src

*** Stored Procedure

Naming convention: stored procedures are prefixed with ~usp~.

**** [cp] Create Procedure Basic Template

Create a simple stored procedure with output parameter.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cp.yasnippet
# name: Create stored proced...
# --
-- Drop stored procedure if it already exists
IF OBJECT_ID ('${1:[schema].[procedure_name]}', 'P') IS NOT NULL
    DROP PROCEDURE $1;
go

-- =============================================
SET ANSI_NULLS ON
go
SET QUOTED_IDENTIFIER ON
go
-- =============================================
-- Author:      /* Author */
-- Create date: /* Create Date */
-- Description: /* Description */
-- =============================================
CREATE PROCEDURE $1
    -- Add the parameters for the function here
    @${2:parameter_name_1} ${3:parameter_data_type_1} = ${4:default_value_for_parameter_1}
    @${5:parameter_name_2} ${6:parameter_data_type_2} OUTPUT
-- WITH ENCRYPTION, RECOMPILE, EXECUTE AS CALLER|SELF|OWNER| 'user_name'
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    -- Insert statements for procedure here
    SELECT @$2$0
END
go

--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--go

-- =============================================
-- Example to execute the stored procedure
-- =============================================
DECLARE @${7:variable_for_output_parameter} $6

EXECUTE $1 /* value_for_parameter_1 */, $7 OUTPUT

SELECT $7
go
#+end_src

**** [crlp] Create CLR Procedure

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/clrp.yasnippet
# name: Create CLR stored pr...
# --
--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--go

CREATE PROCEDURE ${1:[schema].[procedure_name]}
(
    @${2:parameter_name} ${3:parameter_data_type}
)
-- WITH EXECUTE AS CALLER|SELF|OWNER| 'user_name'
AS EXTERNAL NAME ${4:[assembly].[class].[method]};
go

--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
--go$0
#+end_src

**** [ap] Alter Procedure

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ap.yasnippet
# name: ALTER PROCEDURE
# --
ALTER PROCEDURE $0
#+end_src

**** [dp] Drop Procedure

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dp.yasnippet
# name: Drop stored procedure
# --
DROP PROCEDURE $0
#+end_src

*** Synonym

**** Create Synonym

Creates a synonym.

#+begin_src sql :tangle no
CREATE SYNONYM ${1:[schema].[synonym_name]}
FOR ${2:[schema].[object_name]};
go$0
#+end_src

*** Table

**** [ct] Create Table

Creates a table (and drop previous one with the same name).

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ct.yasnippet
# name: Create table
# --
IF OBJECT_ID ('${1:[schema].[table_name]}', 'U') IS NOT NULL
    DROP TABLE $1;
go

CREATE TABLE $1
(
    ${2:column_1} ${3:data_type_1} ${4:column_nullability_1},
    ${5:column_2} ${6:data_type_2} ${5:column_nullability_2},$0
    CONSTRAINT /* contraint_name */ PRIMARY KEY (/* columns_in_primary_key */)
);
go
#+end_src

**** [at] Alter Table fragment

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/at.yasnippet
# name: ALTER TABLE fragm...
# --
ALTER TABLE $0
#+end_src

**** [ata] Add Column

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ata.yasnippet
# name: Add column
# --
ALTER TABLE ${1:[schema].[table_name]} ADD [${2:column_name}] ${3:data_type} ${4:column_nullability};
go$0
#+end_src

**** [atac] modify Column

#+begin_warning
Running ~ALTER COLUMN~ without mentioning attribute ~NOT NULL~ will result in the
column being changed to *nullable*, if it is already not.
#+end_warning

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atac.yasnippet
# name: Modify column
# --
-- WARNING: If the column is not nullable, specify attribute NOT NULL.
ALTER TABLE ${1:[schema].[table_name]} ALTER COLUMN $0;
go
#+end_src

**** [atd] Drop column

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atd.yasnippet
# name: Drop column
# --
ALTER TABLE ${1:[schema].[table_name]} DROP COLUMN $0;
go
#+end_src

**** Add Constraint

#+begin_src sql :tangle no
# name: Add constraint
# --
ALTER TABLE ${1:[schema].[table_name]}
ADD CONSTRAINT ${2:constraint_name};
go
#+end_src

**** [atdc] Drop Constraint

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atdc.yasnippet
# name: Drop constraint
# --
ALTER TABLE ${1:[schema].[table_name]}
DROP CONSTRAINT ${2:constraint_name};
go
#+end_src

**** [dt] Drop Table

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dt.yasnippet
# name: Drop table
# --

IF EXISTS (SELECT *
             FROM sys.tables
             JOIN sys.schemas
               ON sys.tables.schema_id = sys.schemas.schema_id
            WHERE sys.schemas.name = N'${1:schema}'
              AND sys.tables.name = N'${2:table}')
    DROP TABLE $1.$2
go
#+end_src

*** Transaction

**** [bt] Begin Transaction

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/bt.yasnippet
# name: Begin transaction
# --
BEGIN TRANSACTION $0
#+end_src

**** [ctr] Commit Transaction

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ctr.yasnippet
# name: Commit transaction
# --
COMMIT TRANSACTION $0
#+end_src

**** [rt] Rollback Transaction

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/rt.yasnippet
# name: Rollback transaction
# --
ROLLBACK TRANSACTION $0
#+end_src

*** Trigger

**** Create Trigger

Creates a trigger.

#+begin_src sql :tangle no
# name: Create trigger
# --
IF OBJECT_ID ('${1:trigger_name}', 'TR') IS NOT NULL
    DROP TRIGGER $1;
go

-- =============================================
SET ANSI_NULLS ON
go
SET QUOTED_IDENTIFIER ON
go
-- =============================================
-- Author:      /* Author */
-- Create date: /* Create Date */
-- Description: /* Description */
-- =============================================
CREATE TRIGGER $1
ON ${2:[schema].[table_name]}
FOR INSERT, UPDATE, DELETE
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    -- Insert statements for trigger here
    RAISERROR (50009, 16, 10)
    $0
END;
go
#+end_src

**** Enable Trigger

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atet.yasnippet
# name: Enable trigger
# --
ALTER TABLE ${1:[schema].[table_name]} ENABLE TRIGGER $0;
#+end_src

**** Enable All Triggers

Enable all triggers on table.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/ateta.yasnippet
# name: Enable all triggers on...
# --
ALTER TABLE ${1:[schema].[table_name]}$0 ENABLE TRIGGER ALL;
go
#+end_src

**** Disable Trigger

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atdt.yasnippet
# name: Disable trigger
# --
ALTER TABLE ${1:[schema].[table_name]} DISABLE TRIGGER $0;
#+end_src

**** Disable All Triggers

Disable all triggers on table.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/atdta.yasnippet
# name: Disable all triggers on...
# --
ALTER TABLE ${1:[schema].[table_name]}$0 DISABLE TRIGGER ALL;
go
#+end_src

*** User

**** [cu] Create User

Creates a database user.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cu.yasnippet
# name: Create database user
# --
CREATE USER ${1:UserName}$0
FOR /* FROM */ LOGIN /* login_name */
--  CERTIFICATE certificate_name
--  ASYMMETRIC KEY key_name
--  WITHOUT LOGIN
--  WITH DEFAULT_SCHEMA = schema_name
go
#+end_src

**** [du] Drop User

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/du.yasnippet
# name: Drop user
# --
DROP USER ${1:user_name}
go
#+end_src

*** User Defined Data Type

**** Create User-Defined Data Type

Creates a user-defined data type.

#+begin_src sql :tangle no
CREATE TYPE ${1:[schema].[my_data_type]}
FROM ${2:data_type} ${3:column_nullability}
#+end_src

*** User Defined Table Type

**** Create User-Defined Table Type

Creates a user-defined table type.

#+begin_src sql :tangle no
CREATE TYPE ${1:[schema].[my_table_type]} AS TABLE
(
    ${2:column_1} ${3:data_type_1},
    ${4:column_2} ${5:data_type_2}
);
go$0
#+end_src

*** User Defined Type

**** Create User-Defined Type

Creates a CLR integration user-defined type.

#+begin_src sql :tangle no
CREATE TYPE ${1:Utf8String}
EXTERNAL NAME ${2:utf8string}.${3:[Microsoft.Samples.SqlServer.utf8string]};
go$0
#+end_src

*** View

**** [cv] Create View

Creates a view.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/cv.yasnippet
# name: Create view
# --
IF OBJECT_ID ('${1:[schema].[view_name]}', 'V') IS NOT NULL
    DROP VIEW $1;
go

CREATE VIEW $1
--WITH ENCRYPTION, SCHEMABINDING, VIEW_METADATA
AS
    SELECT *
    FROM ${2:[schema].[sample_table]}
    $0
-- WITH CHECK OPTION
go
#+end_src

**** [dv] Drop View

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/dv.yasnippet
# name: Drop view
# --
DROP VIEW $0
#+end_src

*** --- Miscellaneous ---

**** [sph] sp_help

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/sph.yasnippet
# name: Execute sp_help
# --
EXEC sp_help$0
#+end_src

**** [spt] sp_helptext

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/spt.yasnippet
# name: Execute sp_helptext
# --
EXEC sp_helptext$0
#+end_src

**** [xpfd] xp_fixeddrives

Retrieve free space on all fixed drives.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/xpfd.yasnippet
# name: Retrieve free space o...
# --
EXEC master..xp_fixeddrives
#+end_src

**** [w2] Who2

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/w2.yasnippet
# name: Execute sp_who2$0
# --
EXEC sp_who2$0
#+end_src

**** [err] @@ERROR

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/err.yasnippet
# name: @@ERROR function ...
# --
@@ERROR$0
#+end_src

**** [mro] Most Recent Objects

Retrieve 20 most recently created objects.

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/mro.yasnippet
# name: Retrieve 20 most rec...
# --
SELECT TOP 20 [name], [type], crdate
FROM sysobjects
ORDER BY crdate DESC
#+end_src

**** Comment

A comment block.

#+begin_src sql :tangle no
/*
 * $0
 */
#+end_src

**** Comment

A multiline comment block.

#+begin_src sql :tangle no
/*******************************************
 * $0
 *******************************************/
#+end_src

** Surround With...

*** [begin] Code Snippet for BEGIN...END block

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/begin.yasnippet
# name: Surround with BEGIN...
# --
BEGIN
`yas-selected-text`
END
#+end_src

*** [if] Code Snippet for IF construct

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/if.yasnippet
# name: Surround with IF...
# --
IF (${1:Condition})
BEGIN

`yas-selected-text`

END
 #+end_src

*** [while] Code Snippet for WHILE loop

#+begin_src sql :tangle ~/.emacs.d/snippets/sql-mode/while.yasnippet
# name: Surround with WHILE...
# --
WHILE (${1:Condition})
BEGIN

`yas-selected-text`

END
 #+end_src
